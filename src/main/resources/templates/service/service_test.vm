#set($messageClass=$name.getMessageClassName($table))
#set($messageVar=$name.getMessageVarName($table))
#set($messageReqClass=$name.getMessageReqClassName($table))
#set($messageReqVarName=$name.getMessageReqVarName($table))
#set($modelClass=$name.getModelClassName($table))
#set($modelVar=$name.getModelVarName($table))
#set($bizClass=$name.getBizClassName($table))
#set($bizVar=$name.getBizVarName($table))
#set($convertor=$name.getConvertorClassName($table))
#set($primaryKeyVarName=$code.getVarName($table.primaryKey.memberColumns[0].propertyName))
#set($primaryKeyParameter=$code.getParameters($table.primaryKey.memberColumns))
#set($messageQueryClass=$name.getMessageQueryClassName($table))
#set($messageQueryVar=$name.getMessageQueryVarName($table))
#set($modelQueryClass=$name.getModelQueryClassName($table))
#set($modelQueryVar=$name.getModelQueryVarName($table))
#set($serviceVar=$name.getServiceVarName($table))
#set($serviceClass=$name.getServiceClassName($table))
#set($comment=$name.getTableComment($table))
package ${config.getProperty("basePackage")}.test;

import java.math.BigDecimal;
import java.util.Date;

import javax.annotation.Resource;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import ${name.getFullMessageQueryClassName($table)};
import $name.getFullMessageReqClassName($table);
import ${name.getFullMessageClassName($table)};
import ${config.getProperty("basePackage")}.resp.MmcResult;
import ${config.getProperty("basePackage")}.resp.QueryResultInfo;
import ${name.getFullServiceClassName($table)};

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations = {
		"classpath:spring-test.xml",
		"classpath:*/applicationContext-bean.xml",
		"classpath:*/applicationContext-consumer.xml", 
		"classpath:*/applicationContext-dao.xml",
		"classpath:*/applicationContext-redis.xml",
		"classpath:*/applicationContext-ds.xml", 
		})
public class ${name.getTestClassName($table)} extends TestBase {

	@Resource
	private $serviceClass ${serviceVar};

	#if($table.hasDeleteColumn())
	/**
	 * 测试删除$comment
	 */
	@Test
	public void delete${modelClass}() {
		${table.primaryColumn.javaType} ${table.primaryColumn.propertyName} = ${table.primaryColumn.getTestValue()};
		String updateUser = "test user";
		String updateUserName = "System";
		${name.getProjectResultClassName()}<Integer> messageInfo = ${serviceVar}.delete${modelClass}(${table.primaryColumn.propertyName},
				updateUser, updateUserName);
		printAndAssertEquals(messageInfo);
	}
	#else
	/**
	 * 测试删除$comment
	 */
	@Test
	public void delete${modelClass}() {
		${table.primaryColumn.javaType} ${table.primaryColumn.propertyName} = ${table.primaryColumn.getTestValue()};
		${name.getProjectResultClassName()}<Integer> messageInfo = ${serviceVar}.delete${modelClass}(${table.primaryColumn.propertyName});
		printAndAssertEquals(messageInfo);
	}
	#end
	
	/**
	 * 测试创建$comment
	 */
	@Test
	public void create${modelClass}() {
		${messageReqClass} ${messageReqVarName} = new ${messageReqClass}();
		#foreach($column in $table.columns)
		${messageReqVarName}.set${column.cPropertyName}(${column.getTestValue()});	
		#end
		${name.getProjectResultClassName()}<${table.primaryColumn.javaType}> messageInfo = ${serviceVar}
				.create${modelClass}(${messageReqVarName});
		printAndAssertEquals(messageInfo);
	}

	/**
	 * 测试更新$comment
	 */
	@Test
	public void update${modelClass}() {
		${messageReqClass} ${messageReqVarName} = new ${messageReqClass}();
		#foreach($column in $table.columns)
		${messageReqVarName}.set${column.cPropertyName}(${column.getTestValue()});	
		#end
		${name.getProjectResultClassName()}<Integer> messageInfo = ${serviceVar}
				.update${modelClass}(${messageReqVarName});
		printAndAssertEquals(messageInfo);
	}
	
	/**
	 * 测试获取${comment}信息
	 */
	@Test
	public void get${modelClass}() {
		$table.primaryColumn.javaType $table.primaryColumn.propertyName = $table.primaryColumn.getTestValue();
		${name.getProjectResultClassName()}<${messageClass}> messageInfo = ${serviceVar}.get${modelClass}(${table.primaryColumn.propertyName});
		printAndAssertEquals(messageInfo);
	}

	/**
	 * 测试分页获取${comment}信息
	 */
	@Test
	public void query${modelClass}() {
		${messageQueryClass} ${messageQueryVar} = new ${messageQueryClass}();
		${messageQueryVar}.setPageNo(1);
		${messageQueryVar}.setPageSize(10);
		${messageQueryVar}.setOrder("desc");
		${messageQueryVar}.setOrderBy("${table.primaryColumn.propertyName}");
		#foreach($column in $table.columns)
		${messageQueryVar}.set${column.cPropertyName}(${column.getTestValue()});	
		#end
		${name.getProjectResultClassName()}<QueryResultODTO<${messageClass}>> messageInfo = ${serviceVar}
				.query${modelClass}(${messageQueryVar});
		printAndAssertEquals(messageInfo);
	}

}