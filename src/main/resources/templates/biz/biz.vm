#set($mapperClass=$name.getMapperClassName($table))
#set($modelClass=$name.getModelClassName($table))
#set($modelVar=$name.getModelVarName($table))
#set($bizClass=$name.getBizClassName($table))
#set($primaryKeyVarName=$code.getVarName($table.primaryKey.memberColumns[0].propertyName))
#set($primaryKeyParameter=$code.getParameters($table.primaryKey.memberColumns))
#set($messageQueryClass=$name.getMessageQueryClassName($table))
#set($messageQueryVar=$name.getMessageQueryVarName($table))
#set($modelQueryVar=$name.getModelQueryVarName($table))
#set($mapperVarName=$name.getMapperVarName($table))
#set($comment=$name.getTableComment($table))
package ${config.getProperty("basePackage")}.biz;

import ${name.getFullMapperClassName($table)};
import ${name.getFullModelClassName($table)};
import ${name.getFullMessageQueryClassName($table)};
import ${config.getProperty("basePackage")}.resp.base.QueryResultODTO;
import com.github.pagehelper.PageHelper;
import com.github.pagehelper.PageInfo;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Isolation;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import java.util.Date;
import java.util.List;

/**
 * @CopyRright (c)2008-2017: <${companyname}>
 * @Project: <${config.getProperty("project.abbreviation")}>
 * @Comments: <业务层${comment}管理类>
 * @JDK 1.7
 * @Author: <${config.getProperty("project.Author")}>
 * @email : <${config.getProperty("project.email")}>
 * @Create Date: <${nowtime}>
 * @Modify Date: <${nowtime}>
 * @Version: <1.0>
 */
@Service("$name.getBizVarName($table)")
public class $bizClass {
	private final Logger logger = LoggerFactory.getLogger(${bizClass}.class);

	@Autowired
	$mapperClass ${mapperVarName};

#if($table.hasDeleteColumn())
	/**
	*
	* 逻辑删除${comment}
	*
	* @author ${config.getProperty("project.Author")}
	* @version 1.0.0
	* @param id
	* @param updateUser
	* @param updateUserName
	* @return
	*/
	@Transactional(propagation = Propagation.REQUIRED, isolation = Isolation.DEFAULT, rollbackFor = Exception.class)
	public Integer delete$modelClass($primaryKeyParameter, String updateUser, String updateUserName){
		// TODO: Describe business logic and implement it
		int result = ${mapperVarName}.logicalDeleteByPrimaryKey($primaryKeyVarName,updateUser,updateUserName, new Date());
		return result;
	}
#else
    /**
    *
    * 删除${comment}
    *
    * @author ${config.getProperty("project.Author")}
    * @version 1.0.0
    * @param id
    * @return
    */
    @Transactional(propagation = Propagation.REQUIRED, isolation = Isolation.DEFAULT, rollbackFor = Exception.class)
	public Integer delete$modelClass($primaryKeyParameter){
		// TODO: Describe business logic and implement it
		int result = ${mapperVarName}.deleteByPrimaryKey($primaryKeyVarName);
		return result;	
	}
#end
	
	/**
	 * 
	 * 创建${comment}
	 * 
	 * @author ${config.getProperty("project.Author")}
	 * @version 1.0.0
	 * @param $modelVar
	 * @return
	 */
	@Transactional(propagation = Propagation.REQUIRED, isolation = Isolation.DEFAULT, rollbackFor = Exception.class)
    public ${table.primaryColumn.javaType} create$modelClass($modelClass $modelVar){
		// TODO: Describe business logic and implement it
		${mapperVarName}.insertSelective( $modelVar );
		return ${modelVar}.getId();
	}
	
	/**
	 * 
	 * 更新${comment}
	 * 
	 * @author ${config.getProperty("project.Author")}
	 * @version 1.0.0
	 * @param $modelVar
	 * @return
	 */
	@Transactional(propagation = Propagation.REQUIRED, isolation = Isolation.DEFAULT, rollbackFor = Exception.class)
	public Integer update$modelClass($modelClass $modelVar){
		Integer result = null;
		$modelClass ${modelVar}Last = ${mapperVarName}.selectByPrimaryKeyForUpdate( ${modelVar}.${table.primaryColumn.getter}() );
		if( ${modelVar}Last == null){
			// TODO：这里请写清楚
		}
		// TODO: Describe business logic and implement it
		result = ${mapperVarName}.updateByPrimaryKeySelective( $modelVar );
		return result;	
	}
	
	/**
	 * 
	 * 根据ID获取${comment}信息
	 * 
	 * @author ${config.getProperty("project.Author")}
	 * @version 1.0.0
	 * @param id
	 * @return
	 */
	@Transactional(readOnly = true)
	public $modelClass get$modelClass( $primaryKeyParameter ){
		// TODO: Describe business logic and implement it
		$modelClass $modelVar = ${mapperVarName}.selectByPrimaryKey( $primaryKeyVarName );
		return $modelVar;
	}

	/**
	 * 
	 * 分页查询${comment}信息
	 * 
	 * @author ${config.getProperty("project.Author")}
	 * @version 1.0.0
	 * @param ${modelQueryVar}
	 * @return
	 */
	@Transactional(readOnly = true)
	public QueryResultODTO<${modelClass}> query${modelClass}(${messageQueryClass} ${modelQueryVar}) {
    	QueryResultODTO<${modelClass}> queryResult = new QueryResultODTO<${modelClass}>();
		// 使用分页插件PageHelper实现分页功能
		PageHelper.startPage(${modelQueryVar}.getPageNo(), ${modelQueryVar}.getPageSize());
		List<${modelClass}> ${modelVar}List = ${mapperVarName}.query${modelClass}(${modelQueryVar});
		PageInfo<${modelClass}> pageInfo = new PageInfo<${modelClass}>(${modelVar}List);
		queryResult.setPageNo(pageInfo.getPageNum());
		queryResult.setPageSize(pageInfo.getPageSize());
		queryResult.setTotalPages(pageInfo.getPages());
		queryResult.setTotalRecords(pageInfo.getTotal());
		queryResult.setRecords(${modelVar}List);
		return queryResult;
	}

}