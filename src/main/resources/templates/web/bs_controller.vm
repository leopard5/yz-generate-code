#set($messageClass=$name.getMessageClassName($table))
#set($messageVar=$name.getMessageVarName($table))
#set($messageReqClass=$name.getMessageReqClassName($table))
#set($messageReqVarName=$name.getMessageReqVarName($table))
#set($modelClass=$name.getModelClassName($table))
#set($modelVar=$name.getModelVarName($table))
#set($bizClass=$name.getBizClassName($table))
#set($bizVar=$name.getBizVarName($table))
#set($primaryKeyVarName=$code.getVarName($table.primaryKey.memberColumns[0].propertyName))
#set($primaryKeyParameter=$code.getParameters($table.primaryKey.memberColumns))
#set($messageQueryClass=$name.getMessageQueryClassName($table))
#set($messageQueryVar=$name.getMessageQueryVarName($table))
#set($modelQueryClass=$name.getModelQueryClassName($table))
#set($modelQueryVar=$name.getModelQueryVarName($table))
#set($serviceClass=$name.getServiceClassName($table))
#set($serviceVar=$name.getServiceVarName($table))
#set($controllerConvertorClassName=$name.getFullControllerConvertorClassName($table))
#set($controllerVoClassName=${name.getControllerVoClassName($table)})
#set($controllerVoVar=${name.getControllerVoVar($table)})
#set($convertorClassName=${name.getConvertorClassName($table)})
#set($controllerQueryVoClassName=${name.getControllerQueryVoClassName($table)})
#set($controllerQueryVoVar=${name.getControllerQueryVoVar($table)})
#set($comment=$name.getTableComment($table))
package ${config.getProperty("basePackage")}.controller;

import javax.validation.Valid;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import ${controllerConvertorClassName};
import ${config.getProperty("basePackage")}.req.$messageQueryClass;
import ${name.getFullMessageReqClassName($table)};
import ${config.getProperty("basePackage")}.resp.${messageClass};
import ${config.getProperty("basePackage")}.resp.Result;
import ${config.getProperty("basePackage")}.resp.ResultCode;
import ${config.getProperty("basePackage")}.resp.QueryResultInfo;
import ${config.getProperty("basePackage")}.service.${serviceClass};
import ${config.getProperty("basePackage")}.vo.${name.getControllerQueryVoClassName($table)};
import ${config.getProperty("basePackage")}.vo.${name.getControllerVoClassName($table)};
import com.yz.perseus.utils.ValidationResult;
import com.yz.perseus.utils.ValidationUtils;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiResponse;
import com.wordnik.swagger.annotations.ApiResponses;

@RequestMapping("${modelVar}")
@RestController
@Api(value = "${modelVar}", description = "${comment}管理接口")
public class ${modelClass}Controller extends BaseController {
	private final Logger logger = LoggerFactory.getLogger(${modelClass}Controller.class);
	
	@Autowired
	private ${serviceClass} ${serviceVar};

	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "请求成功"),
			@ApiResponse(code = 500, message = "内部错误"),
			@ApiResponse(code = 401, message = "用户不存在"),
			@ApiResponse(code = 402, message = "没有此操作权限"),
			 })
	@ApiOperation(value = "delete${modelClass}", notes = "删除${comment}")
	@RequestMapping(value = "delete${modelClass}", method = { RequestMethod.POST })
	public MmcResult<Integer> delete${modelClass}(Integer id, Integer updateUser, String updateUserName) {
		MmcResult<Integer> result = MmcResult.newSuccess();
		try {
			result = ${serviceVar}.delete${modelClass}(id, updateUser, updateUserName);
		} catch (Exception e) {
			logger.error(e.getMessage(), e);
			result.setCode(MmcResultCode.SYS_ERROR.getCode());
			result.setMessage(MmcResultCode.SYS_ERROR.getMessage());
		}
		return result;
	}

	@ApiResponses(value = { 
			@ApiResponse(code = 200, message = "请求成功"),
			@ApiResponse(code = 500, message = "内部错误"),
			@ApiResponse(code = 401, message = "用户不存在"),
			@ApiResponse(code = 402, message = "没有此操作权限"),
			 })
	@ApiOperation(value = "create${modelClass}", notes = "创建${comment}")
	@RequestMapping(value = "create${modelClass}", method = { RequestMethod.POST })
	public MmcResult<Integer> create${modelClass}(@Valid @RequestBody ${controllerVoClassName} ${controllerVoVar}){
		MmcResult<Integer> result = MmcResult.newSuccess();
		try {
			ValidationResult validateEntity = ValidationUtils.validateEntity(${controllerVoVar});
			if (validateEntity.isHasErrors() ) {
				result.setCode(MmcResultCode.COMMON_PARAM_INVALID.getCode());
				result.setMessage(validateEntity.getErrorMsg().toString());
				return result;
			}
			${messageReqClass} ${messageReqVarName} = ${convertorClassName}.to${messageReqClass}(${controllerVoVar});
			result = ${serviceVar}.create${modelClass}(${messageReqVarName});
		} catch (Exception e) {
			logger.error(e.getMessage(), e);
			result.setCode(MmcResultCode.SYS_ERROR.getCode());
			result.setMessage(MmcResultCode.SYS_ERROR.getMessage());
		}
		return result;
	}
	
	@ApiResponses(value = { 
			@ApiResponse(code = 200, message = "请求成功"),
			@ApiResponse(code = 500, message = "内部错误"),
			@ApiResponse(code = 401, message = "用户不存在"),
			@ApiResponse(code = 402, message = "没有此操作权限"),
			 })
	@ApiOperation(value = "update${modelClass}", notes = "更新${comment}")
	@RequestMapping(value = "update${modelClass}", method = { RequestMethod.POST })
	public MmcResult<Integer> update${modelClass}(@Valid @RequestBody ${controllerVoClassName} ${controllerVoVar}){
		MmcResult<Integer> result = MmcResult.newSuccess();
		try {
			ValidationResult validateEntity = ValidationUtils.validateEntity(${controllerVoVar});
			if (validateEntity.isHasErrors() ) {
				result.setCode(MmcResultCode.COMMON_PARAM_INVALID.getCode());
				result.setMessage(validateEntity.getErrorMsg().toString());
				return result;
			}
			${messageReqClass} ${messageReqVarName} = ${convertorClassName}.to${messageReqClass}(${controllerVoVar});
			result = ${serviceVar}.update${modelClass}(${messageReqVarName});
		} catch (Exception e) {
			logger.error(e.getMessage(), e);
			result.setCode(MmcResultCode.SYS_ERROR.getCode());
			result.setMessage(MmcResultCode.SYS_ERROR.getMessage());
		}
		return result;
	}
	
	@ApiResponses(value = { 
			@ApiResponse(code = 200, message = "请求成功"),
			@ApiResponse(code = 500, message = "内部错误"),
			@ApiResponse(code = 401, message = "用户不存在"),
			@ApiResponse(code = 402, message = "没有此操作权限"),
			 })
	@ApiOperation(value = "get${modelClass}/{id}", notes = "根据${comment}ID获取${comment}信息")
	@RequestMapping(value = "get${modelClass}/{id}", method = { RequestMethod.GET })
	public MmcResult<${messageClass}> get${modelClass}(@PathVariable Integer id ){
		MmcResult<${messageClass}> result = MmcResult.newSuccess();
		try {
			result = ${serviceVar}.get${modelClass}(id);
		} catch (Exception e) {
			logger.error(e.getMessage(), e);
			result.setCode(MmcResultCode.SYS_ERROR.getCode());
			result.setMessage(MmcResultCode.SYS_ERROR.getMessage());
		}
		return result;
	}
	
	@ApiResponses(value = { 
			@ApiResponse(code = 200, message = "请求成功"),
			@ApiResponse(code = 500, message = "内部错误"),
			@ApiResponse(code = 401, message = "用户不存在"),
			@ApiResponse(code = 402, message = "没有此操作权限"),
			 })
	@ApiOperation(value = "query${modelClass}", notes = "分页获取${comment}列表信息")
	@RequestMapping(value = "query${modelClass}", method = { RequestMethod.GET })
	MmcResult<QueryResultInfo<${messageClass}>> query${modelClass}(@Valid @RequestBody ${controllerQueryVoClassName} ${controllerQueryVoVar}){
		MmcResult<QueryResultInfo<${messageClass}>> result = MmcResult.newSuccess();
		try {
			ValidationResult validateEntity = ValidationUtils.validateEntity(${controllerQueryVoVar});
			if (validateEntity.isHasErrors() ) {
				result.setCode(MmcResultCode.COMMON_PARAM_INVALID.getCode());
				result.setMessage(validateEntity.getErrorMsg().toString());
				return result;
			}
			${messageQueryClass} ${messageQueryVar} = ${convertorClassName}.to${messageQueryClass}(${controllerQueryVoVar});
			result = ${serviceVar}.query${modelClass}(${messageQueryVar});
		} catch (Exception e) {
			logger.error(e.getMessage(), e);
			result.setCode(MmcResultCode.SYS_ERROR.getCode());
			result.setMessage(MmcResultCode.SYS_ERROR.getMessage());
		}
		return result;
	}
}
